# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BloqueType {
  altura: Int!
  esValido: Boolean!
  estado: String!
  fechaCreacion: DateTime!
  hashBloque: String!
  hashBloqueAnterior: String!
  id: ID!
  merkleRoot: String!
  nonce: Int!
  numeroTransacciones: Int!
  registrosHash: [HashType!]
  timestamp: Int!
}

input ClienteInput {
  clienteId: ID
  email: String
  nombre: String
}

type CrearBloqueResult {
  bloque: BloqueType
  error: String
  mensaje: String
  success: Boolean!
}

type DatabaseVerification {
  coincideConBD: Boolean!
  estadoEnBD: String!
  fechaCreacion: DateTime!
  hashEnBD: String!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

input DatosVentaInput {
  cliente: ClienteInput
  cuentaMesaId: ID!
  estado: String!
  fechaVenta: String!
  mesa: MesaInput!
  productos: [ProductoInput!]!
  tenantId: ID!
  total: Float!
  ventaId: ID!
}

type ErrorVerificacion {
  altura: Int!
  motivo: String!
}

type EstadisticasBlockchain {
  totalBloques: Int!
  totalTransacciones: Int!
  transaccionesPendientes: Int!
  ultimaAltura: Int
  ultimoBloqueFecha: DateTime
}

input GenerateHashInput {
  datosVenta: DatosVentaInput!
  tenantId: ID!
  ventaId: ID!
}

type HashDebugInfo {
  algorithm: String!
  hash: String!
  hashInput: String!
  inputLength: Int!
  timestamp: DateTime!
}

type HashGenerationResult {
  databaseId: ID
  error: String
  hash: HashType
  message: String
  success: Boolean!
}

type HashType {
  createdAt: DateTime!
  dataSize: Int!
  hash: String!
  hashAlgorithm: String!
  hashInput: String
  id: ID!
  isValid: Boolean!
  lastVerification: DateTime
  status: String!
  tenantId: ID!
  ventaId: ID!
  verifiedBy: String
}

type HashVerificationResult {
  databaseVerification: DatabaseVerification
  isValid: Boolean!
  message: String!
  timestamp: DateTime!
}

input MesaInput {
  capacidad: Int!
  numero: Int!
}

type Mutation {
  crearBloque(creadoPor: String): CrearBloqueResult!
  generateHash(input: GenerateHashInput!): HashGenerationResult!
  verifyHash(input: VerifyHashInput!): HashVerificationResult!
}

input ProductoInput {
  cantidad: Int!
  nombre: String!
  precio: Float!
  productoId: ID!
  subtotal: Float!
}

type Query {
  bloquePorAltura(altura: Int!): BloqueType
  bloques(limite: Int! = 10, offset: Int! = 0): [BloqueType!]!
  debugHash(datosVenta: DatosVentaInput!): HashDebugInfo!
  estadisticasBlockchain: EstadisticasBlockchain!
  estadoScheduler: String!
  restaurantHashes(limit: Int! = 50, tenantId: ID!): RestaurantHashStats!
  ventaHash(ventaId: ID!): HashType
  verificarBloque(altura: Int!): VerificacionBloqueResult!
  verificarCadenaCompleta: VerificacionCadenaResult!
  verificarIntegridadVenta(tenantId: ID, ventaId: ID!, ventaServiceUrl: String): VentaVerificationResult!
}

type RestaurantHashStats {
  invalidHashes: Int!
  recentHashes: [HashType!]!
  tenantId: ID!
  totalRecords: Int!
  validHashes: Int!
}

type VentaVerificationResult {
  coinciden: Boolean
  detalles: String
  estado: String
  fechaVerificacion: DateTime!
  hashAlmacenado: String
  hashCalculado: String
  integra: Boolean!
  mensaje: String!
  tenantId: Float
  ventaId: Float!
}

type VerificacionBloqueResult {
  altura: Int!
  esValido: Boolean!
  hashBloque: String!
  motivo: String
  numeroTransacciones: Int!
}

type VerificacionCadenaResult {
  altura: Int!
  bloquesValidos: Int!
  errores: [ErrorVerificacion!]!
  esValida: Boolean!
  fechaVerificacion: DateTime!
  totalBloques: Int!
}

input VerifyHashInput {
  datosVenta: DatosVentaInput!
  hashEsperado: String!
}